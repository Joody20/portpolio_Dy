import iot from "../../assets/images/IoT.jpg";
import close_btn from "../../assets/images/close.png";
import step1 from "../../assets/images/step1.png";
import step2 from "../../assets/images/step2.png";
import step3 from "../../assets/images/step3.png";

export const project5 = [
  {
    image: iot,
    title: "IoT를 활용한 자율주행자동차",
    date: "2023/03 ~ 2023/06",
    description:
      "이는 Arduino, ESP8266, Raspberry Pi 기반의 마이크로컨트롤러를 사용하여 기본적인 IoT 프로그래밍 방법을 소개합니다. 이를 통해  마이크로컨트롤러에 연결된 센서를 모니터링하고 액추에이터를 로컬 및 원격으로 제어하며 자율주행자동차를 개발하였습니다.",
    close: close_btn,
    features: "주요 기능 및 특징",
    feat1: "센서를 로컬 및 원격으로 모니터링할 수 있습니다.",
    feat2: "액추에이터를 로컬 및 원격으로 제어할 수 있습니다.",
    feat3: "IoT 장치를 원격 기기와 통신할 수 있도록 만들 수 있습니다.",
    feat4: "자신이 설계한 IoT 애플리케이션 프로그램을 개발할 수 있습니다.",
    subTitle: "학습 데이터 취득 방법",
    step1: "코스 1 - 원형 코드",
    step1_des:
      "초기에 제작한 코스입니다. 이 코스는 자동차의 폭을 충분히 고려하지 못했기 때문에 코스의 폭이 일정하지 않으며, 직접 주행하는 데 도로 폭이 좁아 어려움이 있었습니다. 이러한 한계를 인지하여, 코스1을 개선하기 위해 새로운 코스2를 제작하였습니다. ",
    step1_img: step1,
    step2: "코스2 – 타원형자(종이 4개 사용 – main 원형 코스]",
    step2_des:
      "자동차를 메인으로 학습시키기 위한 주행 트랙입니다. 종이 4장을 결합하여 큰 트랙을 구성하였습니다. 이 트랙은 직선 코스와 각 코너에 커브가 조합되어 있어 양질의 데이터를 수집할 수 있을 것으로 예상하고 제작하였습니다. 각 코너마다 각도가 조금씩 다르기에 커브 할 때의 각도가 다양하게 학습된 것 같습니다. 코스2를 활용하여 학습 모델을 제작하였으며, 시계 방향으로 2바퀴, 반시계 방향으로 2바퀴의 주행을 진행하였습니다. 트랙의 폭은 자동차의 세로 길이를 기준으로 삼아 일정하게 제작하였습니다. ",
    step2_img: step2,
    step3: "코스 3 - S자 ",
    step3_des:
      "원형 코스로 자율주행 자동차를 학습한 후, 차선 인식 및 코너 주행 능력을 확인하기 위해 S자 코스를 추가로 제작하였습니다. S자 코스는 좁은 폭에서도 자동차가 정확하게 코너를 돌 수 있는 능력을 테스트하기 위해 코너의 폭을 조금씩 다르게 조정하였습니다. 원형코스에서 학습을 하였기에, 학습한 코스에 없는 각도를 포함하여 자동차가 선을 밟지 않고도 안정적으로 주행할 수 있는지 확인하였습니다. 직진 구간에서는 트랙 폭을 자동차의 세로 길이를 기준으로 삼아 동일하게 유지하였습니다. 이러한 코스를 통해 학습시킨 코스 이외의 코드에서도 자동차의 주행 능력을 다양한 상황에서 평가할 수 있었습니다.",
    step3_img: step3,
    model_des:
      "자율주행 자동차를 개발하기 위해 TensorFlow 1.14를 기반으로 한 NVIDIA 모델을 사용하여 학습을 수행하였습니다. 이 모델은 주로 카메라를 통해 얻은 이미지 데이터를 활용하여 주행 조향 각도를 예측하고, 이에 따라 자동차의 동작을 결정하는데 활용되었습니다. 학습된 모델을 가지고 여러 번의 자율주행 실습을 거쳤으며, 예측된 조향 각도에 따라 자동차가 직진, 우회전, 좌회전을 판단하고 적절한 동작을 수행하도록 구현하였습니다. 또한, 물체 감지를 위한 학습을 진행하기 위해 피피티를 참고하여 OpenCV DNN과 MobileNet-SSD를 활용하였습니다. 이를 통해 자동차가 주변 환경에서 물체를 탐지하고, 필요한 경우 멈춤 동작을 수행할 수 있도록 학습하였습니다. 원형 코스로부터 수집한 학습 데이터를 활용하여 큰 원형 코스, 작은 원형 코스, S자 코스 등 다양한 주행 시나리오를 시뮬레이션하고 수정해야 할 부분을 찾아 학습시킬 때 선을 밟지 않도록 조심하거나 카메라의 각도를 세심하게 조절하는 등 좋은 데이터를 쌓을 수 있도록 신경썼습니다. 이를 위해 이전에 학습한 모델에서 어떤 부분이 잘못되었는지 활용하고, 여러 차례의 실험과 수정을 통해 코드를 개선해 나갔습니다. 이 과정에서 모델의 성능을 높이고 자율주행 자동차가 다양한 상황에서 안정적으로 동작할 수 있도록 노력하였습니다. 또한 카메라로 받아온 이미지를 학습 데이터로 사용하기 때문에 빛에 민감하여, 조명이나 날씨에 따라 threshold 5단위, 10단위로 조절해가며 값도 변경해주며 학습 상황에 따른 최적의 값을 찾기 위해 노력하였습니다.",
  },
];
